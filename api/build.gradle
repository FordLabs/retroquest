buildscript {
    ext {
        springBootVersion = '1.5.9.RELEASE'
        cfAppVersion = '2.3.0-rc.4'
    }
    repositories {
        mavenCentral()
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath("com.github.pivotalservices:ya-cf-app-gradle-plugin:${cfAppVersion}")
        classpath "org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:1.4.2"
        classpath "com.avast.gradle:gradle-docker-compose-plugin:0.7.1"
        classpath "com.google.cloud.tools:appengine-gradle-plugin:2.0.0"
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'cf-app'
apply plugin: 'org.unbroken-dome.test-sets'
apply plugin: 'docker-compose'
apply plugin: "com.google.cloud.tools.appengine-appyaml"

group = 'com.ford.labs'
archivesBaseName = 'retroquest'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'org.springframework.boot:spring-boot-devtools'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-security'
    compile 'org.springframework.boot:spring-boot-starter-websocket'
    compile 'io.jsonwebtoken:jjwt:0.9.0'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    compile 'org.apache.commons:commons-csv:1.5'
    compile 'org.apache.commons:commons-lang3:3.7'
    compile 'org.apache.httpcomponents:httpclient:4.5.5'
    compile 'commons-io:commons-io:2.6'
    compile 'org.flywaydb:flyway-core'
    runtime 'mysql:mysql-connector-java'
    runtime 'com.h2database:h2:1.4.197'
    runtime group: 'com.google.cloud.sql', name: 'mysql-socket-factory', version: '1.0.13'
    compileOnly 'org.projectlombok:lombok'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
}

bootRun {
    addResources = true
}

testSets {
    apiTest
}

task dockerApiTest() {
}

dockerApiTest.finalizedBy apiTest

task runAllTests(dependsOn: [test, apiTest]) {
}

task withH2(type: org.springframework.boot.gradle.run.BootRunTask, dependsOn: 'build') {
    doFirst() {
        main = project.mainClassName
        classpath = sourceSets.main.runtimeClasspath
        systemProperty 'spring.profiles.active', 'h2'
    }
}

task withDockerDb(type: org.springframework.boot.gradle.run.BootRunTask, dependsOn: 'build') {
    doFirst() {
        main = project.mainClassName
        classpath = sourceSets.main.runtimeClasspath
        systemProperty 'spring.profiles.active', 'dockerdb'
    }
}

jar {
    archiveName = "${archivesBaseName}.jar"
}

dockerCompose {

    apiTests {
        useComposeFiles = ['docker-compose.yml']
        isRequiredBy(project.tasks.dockerApiTest)
    }

    waitForTcpPorts = true
}

task buildPackage(){}
buildPackage.dependsOn ':ui:npm_run_build-prod'
buildPackage.finalizedBy 'build'

appengine {
    tools {
        // configure the Cloud Sdk tooling
    }
    stage {
        // configure staging for deployment
    }
    deploy {
        projectId = 'retroquest'
        version = 'initial' + getDateTs()
    }
}

def getDateTs() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmmss')
    return formattedDate
}
